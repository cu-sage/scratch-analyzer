<<Object Stage>>
		<<Object Star>>
				getParam
				=
				procDef
						X1
						setVar:to:
						computeFunction:of:
						+
						*
						-
						getParam
						getParam
						-
						getParam
						getParam
				*
						-
								getParam
								getParam
						-
								getParam
								getParam
				procDef
						X1
						setVar:to:
						computeFunction:of:
						+
						*
						-
						getParam
						getParam
						-
						getParam
						getParam
				*
						-
								getParam
								getParam
						-
								getParam
								getParam
				procDef
						X Position
						doIfElse
						=
						-
						ypos
						getParam
				setVar:to:
						-
						*
						\/
						computeFunction:of:
						-
						xpos
						getParam
				-
						xpos
						getParam
				setVar:to:
						computeFunction:of:
						\/
						-
						ypos
						getParam
						-
						xpos
						getParam
				doIf
						>
						-
						xpos
						getParam
				changeVar:by:
				setVar:to:
						-
						readVariable
				heading:
						readVariable
				procDef
						number1
						doIf
						>
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				changeVar:by:
						\/
						-
						getParam
						readVariable
				changeVar:by:
						\/
						-
						getParam
						readVariable
				changeVar:by:
						\/
						-
						getParam
						readVariable
				procDef
						doIf
						>
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				whenGreenFlag
				doForever
						doIf
						not
						=
						readVariable
						readVariable
				doIf
						>
						*
						readVariable
						readVariable
				doUntil
						<
						*
						readVariable
						readVariable
				doIfElse
						>
						readVariable
						changeVar:by:
						changeVar:by:
				doIf
						not
						=
						readVariable
						readVariable
				doIf
						>
						*
						readVariable
						readVariable
				doUntil
						<
						*
						readVariable
						readVariable
				doIfElse
						>
						readVariable
						changeVar:by:
						changeVar:by:
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				whenKeyPressed
				doIf
						=
						readVariable
						changeVar:by:
						append:toList:
						append:toList:
						append:toList:
						append:toList:
						createCloneOf
				whenKeyPressed
				doIf
						=
						readVariable
						changeVar:by:
						append:toList:
						append:toList:
						append:toList:
						append:toList:
						createCloneOf
				whenIReceive
				doIf
						not
						=
						readVariable
				hide
				whenIReceive
				doIf
						not
						=
						readVariable
				show
				whenKeyPressed
				changeVar:by:
				whenKeyPressed
				doIf
						=
						readVariable
						changeVar:by:
						append:toList:
						append:toList:
						append:toList:
						append:toList:
						createCloneOf
				not
				whenKeyPressed
				doIf
						=
						readVariable
						readVariable
						setLine:ofList:to:
						readVariable
						setLine:ofList:to:
						readVariable
						setLine:ofList:to:
						readVariable
						setLine:ofList:to:
						readVariable
						setVar:to:
						deleteClone
				whenIReceive
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				setVar:to:
						\/
						readVariable
						readVariable
				doIf
						=
						readVariable
						wait:elapsed:from:
						doIf
						>
						readVariable
						setVar:to:
						call
						setVar:to:
						setVar:to:
						setVar:to:
				clearPenTrails
				setVar:to:
				doRepeat
						readVariable
						changeVar:by:
						call
						readVariable
						readVariable
						readVariable
						readVariable
						readVariable
						*
						readVariable
						\/
						readVariable
						readVariable
				call
						readVariable
				broadcast:
				whenCloned
				setVar:to:
						readVariable
				comeToFront
				putPenUp
				goBackByLayers:
				gotoX:y:
						mouseX
						mouseY
				doIf
						=
						getLine:ofList:
						readVariable
				lookLike:
				doIf
						=
						getLine:ofList:
						readVariable
				lookLike:
				doIf
						=
						getLine:ofList:
						readVariable
				lookLike:
				setGraphicEffect:to:
				setSizeTo:
						*
						getLine:ofList:
						readVariable
				show
				wait:elapsed:from:
				setVar:to:
						readVariable
				wait:elapsed:from:
				setVar:to:
						readVariable
				setVar:to:
						getLine:ofList:
						readVariable
				doForever
						doIf
						touching:
						doIf
						mousePressed
						doIf
						>
						timer
						doIfElse
						=
						readVariable
						setVar:to:
						readVariable
						setVar:to:
						getLine:ofList:
						readVariable
				comeToFront
				setVar:to:
				timerReset
				doIf
						=
						readVariable
						readVariable
						gotoX:y:
						mouseX
						mouseY
						setLine:ofList:to:
						readVariable
						readVariable
						setSizeTo:
						*
						getLine:ofList:
						readVariable
				procDef
						doIf
						=
						readVariable
						doIfElse
						=
						readVariable
						setVar:to:
						showVariable:
						showVariable:
						showVariable:
						doBroadcastAndWait
						setVar:to:
						hideVariable:
						hideVariable:
						hideVariable:
						doBroadcastAndWait
				procDef
						steps
						penSize:
						setVar:to:
						doRepeat
						getParam
						call
						readVariable
						readVariable
						readVariable
						putPenUp
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				putPenDown
				call
						getLine:ofList:
						-
						*
						getParam
						readVariable
				getLine:ofList:
						-
						*
						getParam
						readVariable
				call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						-
						*
						getParam
						readVariable
				getLine:ofList:
						-
						*
						getParam
						readVariable
				setVar:to:
				setVar:to:
				doUntil
						>
						readVariable
						readVariable
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						doRepeat
						lineCountOfList:
						changeVar:by:
						doIf
						not
						=
						getLine:ofList:
						readVariable
				call
						xpos
						ypos
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				doIfElse
						<
						computeFunction:of:
						readVariable
						getLine:ofList:
						readVariable
				doIf
						=
						getLine:ofList:
						readVariable
				changeVar:by:
						*
						\/
						-
						getLine:ofList:
						readVariable
						readVariable
				getLine:ofList:
						readVariable
				-
						readVariable
				doIf
						=
						getLine:ofList:
						readVariable
				changeVar:by:
						*
						\/
						-
						getLine:ofList:
						readVariable
						readVariable
				getLine:ofList:
						readVariable
				-
						readVariable
				call
				doIf
						=
						getLine:ofList:
						readVariable
				changeVar:by:
						*
						\/
						-
						getLine:ofList:
						readVariable
						readVariable
				getLine:ofList:
						readVariable
				-
						readVariable
				call
				hide
				call
						rounded
						+
						readVariable
						readVariable
				rounded
						+
						readVariable
						readVariable
				rounded
						+
						readVariable
						readVariable
				forward:
						readVariable
				changeVar:by:
						readVariable
				changeVar:by:
				whenKeyPressed
				call
				whenKeyPressed
				changeVar:by:
				whenKeyPressed
				whenIReceive
				call
				procDef
						pos x
						call
						readVariable
						readVariable
						readVariable
						setVar:to:
						setVar:to:
						deleteLine:ofList:
						deleteLine:ofList:
						putPenUp
						gotoX:y:
						getParam
						getParam
						heading:
						getParam
						doRepeat
						doRepeat
						getParam
						append:toList:
						xpos
						append:toList:
						ypos
						forward:
						getParam
				gotoX:y:
						getParam
						getParam
				turnLeft:
						getParam
				setVar:to:
				setVar:to:
				setVar:to:
				procDef
						doIf
						>
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				procDef
						R
						call
						penColor:
						+
						+
						*
						getParam
						*
						getParam
				getParam
				whenGreenFlag
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				whenCloned
				doForever
						setLine:ofList:to:
						readVariable
						xpos
						setLine:ofList:to:
						readVariable
						ypos
				say:
						readVariable
				show
				say:
						readVariable
				whenGreenFlag
				hide
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				call
						readVariable
						readVariable
						readVariable
				broadcast:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
						\/
						readVariable
						readVariable
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				showVariable:
				showVariable:
				showVariable:
				doBroadcastAndWait
				lookLike:
				show
				gotoX:y:
				append:toList:
				broadcast:
				say:duration:elapsed:from:
				hide
		<<Object Alphabet>>
				procDef
						item
						
				setVar:to:
				gotoX:y:
				lookLike:
				stampCostume
				doRepeat
						stringLength:
						getParam
						doIfElse
						=
						letter:of:
						readVariable
						getParam
				xpos:
				changeYposBy:
				changeVar:by:
				lookLike:
						letter:of:
						readVariable
						getParam
				stampCostume
				changeXposBy:
				changeVar:by:
				whenGreenFlag
				filterReset
				deleteLine:ofList:
				hide
				whenIReceive
				call
						getLine:ofList:
				call
				clearPenTrails
				deleteLine:ofList:
				show
		<<Object Auto2>>
				whenClicked
				broadcast:
				doIfElse
						=
						readVariable
						lookLike:
						lookLike:
				whenGreenFlag
				lookLike:
				show
				hide
				clearPenTrails
				whenIReceive
				think:duration:elapsed:from:
				whenIReceive
				lookLike:
				whenIReceive
				doIfElse
						=
						readVariable
						lookLike:
						lookLike:
		<<Object Create Red Light3>>
				whenGreenFlag
				setSizeTo:
				show
				gotoX:y:
				whenIReceive
				show
				whenIReceive
				hide
				whenKeyPressed
				doIf
						=
						readVariable
				whenClicked
				doIfElse
						=
						readVariable
						changeVar:by:
						append:toList:
						append:toList:
						append:toList:
						append:toList:
						createCloneOf
						doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				say:duration:elapsed:from:
				think:duration:elapsed:from:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
		<<Object Auto>>
				whenClicked
				clearPenTrails
				doBroadcastAndWait
				doIf
						=
						readVariable
						setVar:to:
						broadcast:
				whenGreenFlag
				setVar:to:
				show
				hide
		<<Object Create Blue Light2>>
				whenGreenFlag
				setSizeTo:
				gotoX:y:
				show
				whenIReceive
				show
				whenIReceive
				hide
				whenClicked
				doIfElse
						=
						readVariable
						changeVar:by:
						append:toList:
						append:toList:
						append:toList:
						append:toList:
						createCloneOf
						doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				say:duration:elapsed:from:
				<
		<<Object Create Green Light>>
				whenGreenFlag
				setSizeTo:
				gotoX:y:
				show
				whenIReceive
				show
				whenIReceive
				hide
				whenClicked
				doIfElse
						=
						readVariable
						changeVar:by:
						append:toList:
						append:toList:
						append:toList:
						append:toList:
						createCloneOf
						doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				doIf
						=
						readVariable
						append:toList:
						broadcast:
				say:duration:elapsed:from:
				doIf
						=
						readVariable
						think:duration:elapsed:from: