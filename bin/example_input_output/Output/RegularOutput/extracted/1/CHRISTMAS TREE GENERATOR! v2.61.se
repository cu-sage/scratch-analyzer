<<Object Stage>>
		<<Object Cursor>>
				whenGreenFlag
				doWaitUntil
						=
						readVariable
				show
				doForever
						doIf
						&
						mousePressed
						>
						timer
				timerReset
				goBackByLayers:
				doIf
						&
						>
						mouseX
						<
						mouseX
				doIf
						|
						not
						touching:
						not
						touching:
				doIfElse
						=
						readVariable
						doIf
						=
						readVariable
						doIf
						<
						mouseY
						broadcast:
						broadcast:
				doIfElse
						=
						readVariable
						doIf
						<
						mouseY
						broadcast:
				doIfElse
						=
						readVariable
						doIf
						<
						mouseY
						broadcast:
				doIf
						=
						readVariable
						stampCostume
				doIfElse
						=
						readVariable
						doIf
						=
						readVariable
						lookLike:
						setSizeTo:
						*
						readVariable
				doIfElse
						=
						readVariable
						heading:
						doIf
						=
						readVariable
						heading:
				doIf
						=
						readVariable
						lookLike:
						setSizeTo:
						doIf
						=
						readVariable
						heading:
						doIfElse
						=
						readVariable
						lookLike:
						turnLeft:
						lookLike:
						turnRight:
				doIf
						=
						readVariable
						heading:
						doIfElse
						=
						readVariable
						lookLike:
						turnRight:
						lookLike:
						turnLeft:
				setVar:to:
						+
						heading
						readVariable
				heading:
						readVariable
				doIf
						=
						readVariable
						lookLike:
						setSizeTo:
						heading:
				doIf
						=
						readVariable
						setSizeTo:
						lookLike:
						concatenate:with:
						readVariable
				gotoX:y:
						mouseX
						mouseY
				call
				hide
				hideVariable:
				procDef
						doIfElse
						<
						mouseY
						setVar:to:
						-
						\/
						-
						computeFunction:of:
						readVariable
						computeFunction:of:
						mouseY
				readVariable
				setVar:to:
						-
						\/
						+
						mouseY
						computeFunction:of:
						readVariable
				readVariable
				whenGreenFlag
				whenIReceive
				say:duration:elapsed:from:
				whenIReceive
				say:duration:elapsed:from:
				whenIReceive
				say:duration:elapsed:from:
				whenIReceive
				say:duration:elapsed:from:
				say:duration:elapsed:from:
				say:duration:elapsed:from:
				say:duration:elapsed:from:
				whenIReceive
				say:duration:elapsed:from:
				say:duration:elapsed:from:
				filterReset
				whenGreenFlag
				hide
				lookLike:
				wait:elapsed:from:
				goBackByLayers:
				whenKeyPressed
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						setVar:to:
						setVar:to:
				doIf
						=
						readVariable
						changeVar:by:
						doIf
						=
						readVariable
						setVar:to:
				whenKeyPressed
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						setVar:to:
						setVar:to:
				doIf
						=
						readVariable
						changeVar:by:
						doIf
						=
						readVariable
						setVar:to:
				whenKeyPressed
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						doIfElse
						=
						readVariable
						doIfElse
						=
						readVariable
						doIf
						>
						heading
						changeVar:by:
				doIf
						>
						heading
						changeVar:by:
				doIfElse
						=
						readVariable
						doIf
						<
						heading
						changeVar:by:
				doIf
						<
						heading
						changeVar:by:
				whenKeyPressed
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						doIfElse
						=
						readVariable
						doIfElse
						=
						readVariable
						doIf
						<
						heading
						changeVar:by:
				doIf
						<
						heading
						changeVar:by:
				doIfElse
						=
						readVariable
						doIf
						>
						heading
						changeVar:by:
				doIf
						>
						heading
						changeVar:by:
				stopScripts
				whenIReceive
				hide
		<<Object Snow>>
				whenCloned
				lookLike:
				show
				setVar:to:
				doUntil
						<
						ypos
						doIf
						=
						randomFrom:to:
						changeVar:by:
						randomFrom:to:
						heading:
						readVariable
				doIf
						>
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				doIf
						>
						xpos
						xpos:
				doIf
						<
						xpos
						xpos:
				forward:
				deleteClone
				whenCloned
				doForever
						doIf
						<
						ypos
						doIf
						=
						randomFrom:to:
						doIf
						touchingColor:
						lookLike:
						stampCostume
						deleteClone
				doIf
						=
						randomFrom:to:
						doIf
						touchingColor:
						lookLike:
						stampCostume
						deleteClone
				whenGreenFlag
				setVar:to:
				lookLike:
				hide
				whenIReceive
				broadcast:
				playSound:
				setVar:to:
				doUntil
						not
						=
						readVariable
				doIf
						=
						randomFrom:to:
						gotoX:y:
						randomFrom:to:
						createCloneOf
				doIf
				touching:
				touchingColor:
				|
				>
				whenIReceive
				stopAllSounds
				setVar:to:
				deleteClone
				clearPenTrails
				touchingColor:
				playSound:
				whenIReceive
				deleteClone
				broadcast:
				broadcast:
		<<Object Branches new>>
				whenCloned
				hide
				changeVar:by:
				putPenUp
				doIf
						=
						readVariable
						setPenHueTo:
						setPenShadeTo:
						setVar:to:
						setVar:to:
						doUntil
						=
						readVariable
						changeVar:by:
						changeVar:by:
						changeVar:by:
						doIf
						>
						readVariable
						setVar:to:
				penSize:
						readVariable
				putPenDown
				doIf
						>
						readVariable
						setVar:to:
						changeVar:by:
						changeVar:by:
						randomFrom:to:
						heading:
						+
						randomFrom:to:
				doIf
						=
						randomFrom:to:
						doIf
						>
						readVariable
						setVar:to:
						changeVar:by:
						changeVar:by:
						randomFrom:to:
						heading:
						+
						randomFrom:to:
				doIf
						=
						readVariable
						doIf
						>
						readVariable
						doIf
						=
						randomFrom:to:
						setVar:to:
						setVar:to:
						createCloneOf
				forward:
				doIf
						=
						randomFrom:to:
						setVar:to:
						createCloneOf
						setPenShadeTo:
						randomFrom:to:
				setVar:to:
						ypos
				setVar:to:
						xpos
				changeVar:by:
				deleteClone
				doIf
						=
						readVariable
						setPenHueTo:
						setPenShadeTo:
						doIfElse
						=
						readVariable
						setVar:to:
						changeVar:by:
						\/
						*
						readVariable
				setVar:to:
						*
						readVariable
				doIf
						<
						readVariable
						deleteClone
				doIfElse
						=
						readVariable
						setVar:to:
						setVar:to:
						setVar:to:
						-
						readVariable
				setVar:to:
				setVar:to:
						readVariable
				setVar:to:
				heading:
						readVariable
				doWaitUntil
						<
						readVariable
						+
						randomFrom:to:
				setVar:to:
				doIfElse
						=
						readVariable
						setVar:to:
						*
						readVariable
						readVariable
				setVar:to:
						*
						readVariable
				setVar:to:
				doRepeat
						readVariable
						penSize:
						readVariable
						putPenDown
						doIf
						=
						randomFrom:to:
						doIfElse
						=
						readVariable
						changeVar:by:
						randomFrom:to:
				changeVar:by:
						randomFrom:to:
				heading:
						readVariable
				doIf
						=
						randomFrom:to:
						doIf
						>
						readVariable
						changeVar:by:
				doIf
						=
						readVariable
						doIf
						>
						readVariable
						doIf
						=
						randomFrom:to:
						setVar:to:
						setVar:to:
						setPenShadeTo:
						randomFrom:to:
						createCloneOf
				changeVar:by:
				doIf
						=
						randomFrom:to:
						setVar:to:
						createCloneOf
				forward:
				changeVar:by:
				deleteClone
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						wait:elapsed:from:
				setPenHueTo:
				setPenShadeTo:
				setVar:to:
				doWaitUntil
						<
						readVariable
						+
						randomFrom:to:
				setVar:to:
				penSize:
						readVariable
				doIfElse
						=
						readVariable
						doIfElse
						=
						randomFrom:to:
						changeVar:by:
						changeVar:by:
				doIfElse
						=
						readVariable
						setVar:to:
						setVar:to:
				setVar:to:
						readVariable
				heading:
						readVariable
				doIfElse
						=
						readVariable
						setVar:to:
						*
						readVariable
				setVar:to:
						*
						*
						readVariable
				putPenUp
				forward:
				putPenDown
				doRepeat
						readVariable
						changeVar:by:
						forward:
						doIf
						=
						randomFrom:to:
						setVar:to:
						createCloneOf
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						doIf
						=
						rounded
						readVariable
						rounded
						*
						readVariable
				doIf
						=
						randomFrom:to:
						setVar:to:
						append:toList:
						xpos
						append:toList:
						ypos
				changeVar:by:
				deleteClone
				doIf
						=
						readVariable
						setVar:to:
						setPenHueTo:
						setPenShadeTo:
						readVariable
						setVar:to:
						putPenDown
						penSize:
						doIfElse
						=
						randomFrom:to:
						changeVar:by:
						changeVar:by:
				heading:
						readVariable
				doRepeat
						changeVar:by:
						setPenShadeTo:
						readVariable
						forward:
				changeVar:by:
				deleteClone
				doIf
						=
						readVariable
						wait:elapsed:from:
						setPenHueTo:
						setPenShadeTo:
						penSize:
						doIfElse
						=
						randomFrom:to:
						changeVar:by:
						+
						readVariable
						+
						randomFrom:to:
				changeVar:by:
						+
						readVariable
						+
						randomFrom:to:
				heading:
						readVariable
				putPenDown
				doRepeat
						+
						readVariable
						forward:
				changeVar:by:
				deleteClone
				doIf
						=
						readVariable
						wait:elapsed:from:
						setPenHueTo:
						setPenShadeTo:
						penSize:
						doIfElse
						=
						randomFrom:to:
						setVar:to:
						+
						readVariable
						+
						randomFrom:to:
				setVar:to:
						+
						readVariable
						+
						randomFrom:to:
				heading:
						readVariable
				doIf
						>
						readVariable
						setVar:to:
				putPenDown
				doRepeat
						+
						readVariable
						forward:
				changeVar:by:
				deleteClone
				doIf
						=
						readVariable
				procDef
						doIfElse
						=
						readVariable
						gotoX:y:
						heading:
						gotoX:y:
						mouseX
						mouseY
						doIf
						=
						readVariable
						doIf
						|
						<
						ypos
						readVariable
						>
						ypos
						readVariable
				stopScripts
				setVar:to:
				setVar:to:
				createCloneOf
				setVar:to:
				doIf
						=
						readVariable
						setVar:to:
						ypos
						doWaitUntil
						>
						readVariable
				doWaitUntil
						<
						readVariable
				setVar:to:
				doIfElse
						=
						readVariable
						wait:elapsed:from:
						doIf
						=
						readVariable
						call
				broadcast:
				doIf
						=
						readVariable
						broadcast:
				procDef
						setSizeTo:
						doRepeat
						lineCountOfList:
						gotoX:y:
						getLine:ofList:
						getLine:ofList:
						lookLike:
						show
						stampCostume
						deleteLine:ofList:
						deleteLine:ofList:
				hide
				changeVar:by:
				whenIReceive
				broadcast:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				broadcast:
				doBroadcastAndWait
				call
				putPenUp
				*
						readVariable
				setVar:to:
				setVar:to:
				whenKeyPressed
				doIf
						=
						readVariable
						filterReset
						doIf
						=
						readVariable
						doIfElse
						=
						readVariable
						broadcast:
						setVar:to:
						setVar:to:
						doIfElse
						=
						readVariable
						broadcast:
						setVar:to:
						setVar:to:
						doIfElse
						=
						readVariable
						broadcast:
						setVar:to:
						doIfElse
						=
						readVariable
						broadcast:
						setVar:to:
						doIfElse
						=
						readVariable
						setVar:to:
				doIfElse
				doIf
						=
						readVariable
				readVariable
				show
				say:
						readVariable
				=
				broadcast:
				whenIReceive
				call
				deleteClone
				procDef
						call
				say:
				procDef
						call
				readVariable
				procDef
						deleteLine:ofList:
						deleteLine:ofList:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						filterReset
						putPenUp
						clearPenTrails
				broadcast:
				whenIReceive
				doIf
						=
						readVariable
						setVar:to:
						setVar:to:
						setVar:to:
						call
						putPenUp
						clearPenTrails
						call
						putPenUp
				setPenHueTo:
				setPenShadeTo:
				whenGreenFlag
				hideVariable:
				setVar:to:
				setVar:to:
				setVar:to:
				call
				doIfElse
						=
						randomFrom:to:
						setVar:to:
						setVar:to:
				doIfElse
						=
						randomFrom:to:
						setVar:to:
						setVar:to:
				whenIReceive
				doIf
						=
						readVariable
						call
		<<Object STAR>>
				=
				clearPenTrails
				whenIReceive
				lookLike:
				setVar:to:
				setPenHueTo:
				setPenShadeTo:
						readVariable
				doAsk
				doIfElse
						|
						=
						answer
						=
						answer
				doAsk
				doIfElse
						&
						>
						answer
						<
						answer
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
						answer
				show
				doRepeat
						readVariable
						changeVar:by:
						call
						readVariable
						+
						readVariable
						\/
						readVariable
						readVariable
						*
						readVariable
						\/
						readVariable
				call
						readVariable
				gotoX:y:
						readVariable
						+
						readVariable
				broadcast:
				hide
				broadcast:
				doForever
						doIf
						>
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				changeVar:by:
						readVariable
				setGraphicEffect:to:
						readVariable
				whenIReceive
				hide
				whenIReceive
				hide
				readVariable
				changePenShadeBy:
				changePenShadeBy:
				doIf
				procDef
						steps
						penSize:
						setVar:to:
						doRepeat
						getParam
						putPenUp
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				putPenDown
				gotoX:y:
						getLine:ofList:
						-
						*
						getParam
						readVariable
				getLine:ofList:
						-
						*
						getParam
						readVariable
				changeVar:by:
				procDef
						pos x
						deleteLine:ofList:
						deleteLine:ofList:
						putPenUp
						gotoX:y:
						getParam
						getParam
						heading:
						getParam
						doRepeat
						doRepeat
						getParam
						append:toList:
						xpos
						append:toList:
						ypos
						forward:
						getParam
				gotoX:y:
						getParam
						getParam
				turnLeft:
						getParam
				<
				>
				doIf
						=
						readVariable
						\/
						readVariable
				changeVar:by:
				setPenShadeTo:
						readVariable
				changeGraphicEffect:by:
				setVar:to:
				setVar:to:
				changeVar:by:
				setVar:to:
				>
				doIfElse
						=
						randomFrom:to:
				setPenHueTo:
				setPenShadeTo:
						readVariable
				whenGreenFlag
				hide
		<<Object Auto>>
				whenClicked
				setVar:to:
				doBroadcastAndWait
				broadcast:
				broadcast:
				broadcast:
				hideVariable:
				setGraphicEffect:to:
				whenIReceive
				comeToFront
				whenGreenFlag
				wait:elapsed:from:
				comeToFront
				whenIReceive
				filterReset
		<<Object Manual>>
				whenClicked
				broadcast:
				showVariable:
				setGraphicEffect:to:
				whenIReceive
				comeToFront
				whenGreenFlag
				wait:elapsed:from:
				comeToFront
				whenIReceive
				filterReset