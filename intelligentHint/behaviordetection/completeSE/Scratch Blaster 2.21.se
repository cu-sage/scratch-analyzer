<<Object Stage>>
		doForever
		whenGreenFlag
		startScene
		setVar:to:
		wait:elapsed:from:
		doUntil
				=
				readVariable
				doPlaySoundAndWait
		whenKeyPressed
		doIfElse
				=
				readVariable
				playSound:
				setVar:to:
				setVar:to:
				stopAllSounds
		<<Object DIFFICULTY>>
				whenGreenFlag
				setVar:to:
				comeToFront
				goBackByLayers:
				gotoX:y:
				show
				setGraphicEffect:to:
				doForever
						doWaitUntil
						=
						readVariable
				doIf
						touching:
						doIf
						mousePressed
						doIfElse
						=
						readVariable
						setVar:to:
						setVar:to:
				broadcast:
				wait:elapsed:from:
				whenIReceive
				hide
				goBackByLayers:
				doIf
						=
						readVariable
				comeToFront
				whenIReceive
				goBackByLayers:
				show
				whenIReceive
				goBackByLayers:
				doIf
						touching:
						doIf
						mousePressed
				doIf
		<<Object GRPAHICS>>
				whenGreenFlag
				setVar:to:
				comeToFront
				goBackByLayers:
				gotoX:y:
				show
				setGraphicEffect:to:
				doForever
						doWaitUntil
						=
						readVariable
				doIf
						touching:
						doIf
						mousePressed
						doIfElse
						=
						readVariable
						setVar:to:
						setVar:to:
						broadcast:
				broadcast:
				wait:elapsed:from:
				whenIReceive
				goBackByLayers:
				comeToFront
				filterReset
				whenIReceive
				hide
				goBackByLayers:
				whenIReceive
				goBackByLayers:
				doIf
		<<Object Far Back 2>>
				whenGreenFlag
				hide
				broadcast:
				whenIReceive
				lookLike:
				show
				xpos:
				comeToFront
				setGraphicEffect:to:
				goBackByLayers:
				show
				doUntil
						=
						readVariable
						ypos:
						-
						%
						+
						readVariable
				hide
				doForever
		<<Object Far Back 1>>
				whenGreenFlag
				hide
				broadcast:
				doForever
				whenIReceive
				lookLike:
				show
				setGraphicEffect:to:
				xpos:
				comeToFront
				goBackByLayers:
				show
				doUntil
						=
						readVariable
						ypos:
						-
						%
						readVariable
				hide
		<<Object starfield2>>
				whenGreenFlag
				show
				xpos:
				comeToFront
				goBackByLayers:
				doForever
						ypos:
						-
						%
						+
						readVariable
				gotoX:y:
		<<Object starfield>>
				whenGreenFlag
				xpos:
				show
				comeToFront
				goBackByLayers:
				doForever
						ypos:
						-
						%
						readVariable
		<<Object Enemy>>
				procDef
						x
						setVar:to:
						computeFunction:of:
						+
						*
						getParam
						getParam
						*
						getParam
						getParam
				whenCloned
				doIf
						not
						=
						readVariable
				setVar:to:
				doWaitUntil
						not
						=
						readVariable
				comeToFront
				show
				doIf
						=
						readVariable
						turnLeft:
				doForever
						doIf
						=
						readVariable
						lookLike:
						concatenate:with:
						readVariable
				doIfElse
						=
						costumeIndex
						wait:elapsed:from:
						wait:elapsed:from:
				changeVar:by:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						turnLeft:
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				doIf
						=
						readVariable
						setVar:to:
				wait:elapsed:from:
				doIf
						=
						readVariable
						turnLeft:
						doIfElse
						=
						readVariable
						lookLike:
						concatenate:with:
						readVariable
				lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				doIf
						=
						readVariable
						setVar:to:
				wait:elapsed:from:
				whenCloned
				wait:elapsed:from:
				doForever
						doIf
						=
						readVariable
						doIf
						=
						readVariable
						doIf
						=
						readVariable
						doWaitUntil
						=
						costumeIndex
				setVar:to:
						readVariable
				setVar:to:
						heading
				playSound:
				setVar:to:
				createCloneOf
				wait:elapsed:from:
						readVariable
				doIf
						|
						=
						readVariable
						=
						readVariable
				setVar:to:
						readVariable
				setVar:to:
						heading
				setVar:to:
				createCloneOf
				playSound:
				wait:elapsed:from:
						readVariable
				procDef
						penSize:
						setPenShadeTo:
						penColor:
						setVar:to:
						doRepeat
						-
						readVariable
						call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				changeVar:by:
				procDef
						putPenDown
						setVar:to:
						doRepeat
						rounded
						\/
						readVariable
				call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				changeVar:by:
				penColor:
				penSize:
				setVar:to:
				doRepeat
						rounded
						\/
						readVariable
				call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				changeVar:by:
				putPenUp
				procDef
						deleteLine:ofList:
						deleteLine:ofList:
						doIf
						<
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				setVar:to:
						+
						\/
						readVariable
				doRepeat
						readVariable
						append:toList:
						readVariable
						append:toList:
						changeVar:by:
						\/
						readVariable
				procDef
						x1
						putPenUp
						gotoX:y:
						getParam
						getParam
						putPenDown
						gotoX:y:
						getParam
						getParam
						putPenUp
				procDef
						col
						doIf
						=
						getParam
						setSizeTo:
						show
						gotoX:y:
						readVariable
						readVariable
						changeXposBy:
						changeYposBy:
						changeXposBy:
						hide
				procDef
						penSize:
						penColor:
						setVar:to:
						doRepeat
						readVariable
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				penSize:
						readVariable
				penColor:
				setPenShadeTo:
				putPenDown
				putPenUp
				doIfElse
						=
						readVariable
						readVariable
						setPenShadeTo:
						setPenShadeTo:
				penSize:
						\/
						readVariable
				putPenDown
				putPenUp
				changeVar:by:
				procDef
						x1
						setVar:to:
						-
						getParam
						*
						-
						getParam
						getParam
						getParam
				setVar:to:
						-
						getParam
						*
						-
						getParam
						getParam
						getParam
				procDef
						branch
						
				doIf
						=
						getParam
						deleteLine:ofList:
						deleteLine:ofList:
				doIf
						=
						getParam
						deleteLine:ofList:
						deleteLine:ofList:
				setVar:to:
				doRepeat
						+
						rounded
						\/
						readVariable
				setVar:to:
				deleteLine:ofList:
				deleteLine:ofList:
				doRepeat
						-
						readVariable
						setVar:to:
						doRepeat
						-
						readVariable
						readVariable
						doIfElse
						=
						readVariable
						doIf
						=
						readVariable
						call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				readVariable
				doIf
						=
						readVariable
						call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				readVariable
				append:toList:
						readVariable
				append:toList:
						readVariable
				doIfElse
						not
						=
						readVariable
						-
						readVariable
				call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				readVariable
				setLine:ofList:to:
						readVariable
						readVariable
				setLine:ofList:to:
						readVariable
						readVariable
				call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				readVariable
				doIf
						=
						getParam
						append:toList:
						readVariable
						append:toList:
						readVariable
				doIf
						=
						getParam
						append:toList:
						readVariable
						append:toList:
						readVariable
				doIf
						=
						readVariable
						setPenHueTo:
						+
						*
						-
						readVariable
				setPenShadeTo:
				penSize:
				call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
						getLine:ofList:
						+
						readVariable
				getLine:ofList:
						+
						readVariable
				doIf
						=
						readVariable
						call
						+
						*
						-
						readVariable
				changeVar:by:
				changeVar:by:
				changeVar:by:
						readVariable
				whenCloned
				setVar:to:
						readVariable
				setVar:to:
						getLine:ofList:
						readVariable
				setVar:to:
						getLine:ofList:
						readVariable
				setVar:to:
				setVar:to:
				doIfElse
						=
						readVariable
						setVar:to:
						readVariable
				setVar:to:
						readVariable
				setSizeTo:
				doIf
						=
						readVariable
						setVar:to:
						setVar:to:
						-
						\/
						readVariable
				call
						readVariable
				penSize:
				penColor:
				call
						readVariable
				penSize:
				penColor:
				call
						readVariable
				setLine:ofList:to:
						readVariable
				setVar:to:
				setVar:to:
						-
						\/
						readVariable
				setVar:to:
				deleteClone
				doIfElse
						=
						readVariable
						doIf
						=
						readVariable
						call
						readVariable
				doIf
						=
						readVariable
						call
						readVariable
				setVar:to:
				doIfElse
						=
						readVariable
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				doIf
						=
						readVariable
						setRotationStyle
						heading:
				doIf
						=
						readVariable
						setRotationStyle
				doIf
						=
						readVariable
						setGraphicEffect:to:
						setVar:to:
				doIfElse
						=
						readVariable
						setVar:to:
						lineCountOfList:
				setVar:to:
						lineCountOfList:
				doRepeat
						readVariable
						wait:elapsed:from:
						readVariable
						doIfElse
						=
						readVariable
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				doIf
						=
						readVariable
						setVar:to:
						pointTowards:
						turnRight:
						doIf
						>
						heading
						setVar:to:
						heading:
				doIf
						<
						heading
						setVar:to:
						heading:
				setLine:ofList:to:
						readVariable
						xpos
				setLine:ofList:to:
						readVariable
						ypos
				changeVar:by:
				setLine:ofList:to:
						readVariable
				stopScripts
				deleteClone
				whenIReceive
				gotoX:y:
				setSizeTo:
				hide
				goBackByLayers:
				hideVariable:
				hideVariable:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
						-
						\/
						readVariable
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				doRepeat
						setGraphicEffect:to:
						wait:elapsed:from:
						filterReset
				whenCloned
				doForever
						doWaitUntil
						touching:
						doIf
						=
						readVariable
						broadcast:
						call
				procDef
						filterReset
						playSound:
						setVar:to:
						setSizeTo:
						doRepeat
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				doIf
						=
						readVariable
						changeVar:by:
				doIf
						=
						readVariable
						changeVar:by:
				setLine:ofList:to:
						readVariable
				setLine:ofList:to:
						readVariable
				stopScripts
				deleteClone
				whenCloned
				doForever
						doWaitUntil
						touching:
						doIf
						=
						readVariable
						broadcast:
						call
				whenCloned
				setVar:to:
				setVar:to:
				doForever
						doIf
						=
						readVariable
						doWaitUntil
						|
						touching:
						touching:
				doIf
						=
						readVariable
						doIfElse
						<
						readVariable
						setVar:to:
						xpos
						setVar:to:
						ypos
						filterReset
						playSound:
						setVar:to:
						setSizeTo:
						doRepeat
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				doIf
						=
						readVariable
						changeVar:by:
				doIf
						=
						readVariable
						changeVar:by:
				call
						getLine:ofList:
						readVariable
				changeVar:by:
				broadcast:
				setLine:ofList:to:
						readVariable
				setLine:ofList:to:
						readVariable
				stopScripts
				deleteClone
				doIf
						=
						readVariable
						setVar:to:
						readVariable
						broadcast:
						changeVar:by:
						setVar:to:
						wait:elapsed:from:
						setVar:to:
				whenGreenFlag
				call
				hide
				setVolumeTo:
				setVar:to:
				procDef
						Reward
						
				doIf
						not
						=
						getLine:ofList:
						readVariable
				doIf
						=
						readVariable
						readVariable
						doIf
						not
						=
						readVariable
				setVar:to:
				setVar:to:
				setVar:to:
						xpos
				setVar:to:
						ypos
				setVar:to:
						getLine:ofList:
						readVariable
				createCloneOf
				doIf
						=
						readVariable
						readVariable
						doIf
						not
						=
						readVariable
				setVar:to:
				setVar:to:
				setVar:to:
						xpos
				setVar:to:
						ypos
				setVar:to:
						getLine:ofList:
						readVariable
				createCloneOf
				show
				procDef
						branch
						
				show
				comeToFront
				lookLike:
				setVar:to:
				doIfElse
						=
						readVariable
						doRepeat
						lineCountOfList:
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				putPenDown
				putPenUp
				changeVar:by:
				doRepeat
						lineCountOfList:
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				putPenDown
				putPenUp
				changeVar:by:
				lookLike:
				doIfElse
						=
						readVariable
				procDef
						R
						penColor:
						+
						+
						*
						computeFunction:of:
						getParam
				*
						computeFunction:of:
								getParam
				computeFunction:of:
						getParam
				procDef
						show
						changeGraphicEffect:by:
						doRepeat
						nextCostume
				filterReset
				hide
		<<Object Player projectile>>
				whenCloned
				setVar:to:
						readVariable
				setVar:to:
				doIf
						=
						readVariable
						show
						lookLike:
						gotoX:y:
						getAttribute:of:
						+
						getAttribute:of:
				heading:
				changeYposBy:
				doUntil
						touching:
						forward:
				deleteClone
				doIf
						=
						readVariable
						show
						lookLike:
						gotoX:y:
						-
						getAttribute:of:
						+
						getAttribute:of:
				heading:
				doUntil
						touching:
						forward:
				deleteClone
				doIf
						=
						readVariable
						show
						lookLike:
						gotoX:y:
						+
						getAttribute:of:
						+
						getAttribute:of:
				heading:
				doUntil
						touching:
						forward:
				deleteClone
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						call
				setVar:to:
				setVar:to:
						readVariable
				playSound:
				setRotationStyle
				lookLike:
				gotoX:y:
						+
						getAttribute:of:
						+
						getAttribute:of:
				show
				doUntil
						touching:
						call
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				forward:
						readVariable
				setVar:to:
						+
						readVariable
				deleteClone
				whenGreenFlag
				whenIReceive
				hide
				comeToFront
				goBackByLayers:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				whenCloned
				wait:elapsed:from:
				doForever
						doIf
						=
						readVariable
						doIf
						=
						readVariable
						doIf
						=
						getLine:ofList:
						readVariable
				setVar:to:
				setVar:to:
				doRepeat
						changeVar:by:
						lookLike:
						concatenate:with:
						readVariable
				deleteClone
				readVariable
				setVar:to:
				>
				whenCloned
				doForever
						doWaitUntil
						|
						touching:
						touching:
				doIfElse
						=
						readVariable
						wait:elapsed:from:
						setVar:to:
						deleteClone
						wait:elapsed:from:
						deleteClone
				procDef
						setVar:to:
						readVariable
						setVar:to:
						doRepeat
						lineCountOfList:
						changeVar:by:
						doIf
						&
						=
						getLine:ofList:
						readVariable
				>
						readVariable
						readVariable
				setVar:to:
						readVariable
				broadcast:
				stopScripts
				broadcast:
				setVar:to:
				setVar:to:
				setVar:to:
				doRepeat
						lineCountOfList:
						changeVar:by:
						doIf
						=
						getLine:ofList:
						readVariable
				setVar:to:
						readVariable
				broadcast:
				stopScripts
				whenKeyPressed
				call
				setVar:to:
				procDef
						x
						setVar:to:
						\/
						-
						getParam
						ypos
						-
						getParam
						xpos
				setVar:to:
						computeFunction:of:
						readVariable
				doIfElse
						>
						getParam
						xpos
						setVar:to:
						-
						readVariable
				setVar:to:
						-
						readVariable
				doIf
						=
						getParam
						setVar:to:
						+
						readVariable
				heading:
						readVariable
		<<Object Add on projectile>>
				whenCloned
				setRotationStyle
				show
				doIf
						=
						readVariable
						setVar:to:
						-
						getAttribute:of:
				heading:
						getLine:ofList:
				doIf
						=
						readVariable
						setVar:to:
						+
						getAttribute:of:
				heading:
						getLine:ofList:
				gotoX:y:
						readVariable
						getAttribute:of:
				lookLike:
				doUntil
						|
						<
						ypos
						|
						>
						ypos
						|
						<
						xpos
						>
						xpos
				forward:
				deleteClone
				whenCloned
				doForever
						doWaitUntil
						touching:
						wait:elapsed:from:
						deleteClone
				doIf
						<
						computeFunction:of:
						-
						xpos
						readVariable
				doIf
						<
						computeFunction:of:
						-
						ypos
						readVariable
				setVar:to:
				setVar:to:
				deleteClone
				whenIReceive
				hide
				comeToFront
				goBackByLayers:
		<<Object Main>>
				whenIReceive
				doIf
						=
						readVariable
						stopScripts
						gotoX:y:
						setSizeTo:
						clearPenTrails
						call
						doBroadcastAndWait
						setVar:to:
						stopScripts
				procDef
						number of clones
						setVar:to:
						doIfElse
						=
						letter:of:
						getParam
				call
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				call
						getParam
				call
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				setVar:to:
				doRepeat
						getParam
						changeVar:by:
						doIfElse
						list:contains:
						setVar:to:
						setVar:to:
						doRepeat
						lineCountOfList:
						doIf
						=
						getLine:ofList:
						readVariable
				doIf
						=
						readVariable
						setLine:ofList:to:
						readVariable
						setLine:ofList:to:
						readVariable
						getParam
						setLine:ofList:to:
						readVariable
						setLine:ofList:to:
						readVariable
						getParam
						setVar:to:
						readVariable
						setVar:to:
						setVar:to:
						getParam
						createCloneOf
				changeVar:by:
				append:toList:
				append:toList:
				append:toList:
				append:toList:
						getParam
				append:toList:
				setVar:to:
						+
						lineCountOfList:
				append:toList:
						getParam
				setVar:to:
						getParam
				createCloneOf
				wait:elapsed:from:
						getParam
				getParam
				getParam
				getParam
				getParam
				getParam
				procDef
						string1
						
				doIf
						=
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						-
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						+
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						-
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						+
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				procDef
						pattern
						
				doIf
						=
						readVariable
						setVar:to:
						call
						getParam
						doWaitUntil
						=
						readVariable
				broadcast:
				procDef
						wait:elapsed:from:
				setVar:to:
				procDef
						TEXT
						
				setVar:to:
				gotoX:y:
						-
						*
						stringLength:
						getParam
						\/
						getParam
				doIf
						>
						stringLength:
						getParam
				gotoX:y:
						-
						*
						\/
						getParam
				doRepeat
						stringLength:
						getParam
						doIf
						=
						readVariable
						gotoX:y:
						-
						*
						-
						stringLength:
						getParam
				\/
						getParam
				doIfElse
						=
						letter:of:
						readVariable
						getParam
				changeXposBy:
						getParam
				changeVar:by:
				playSound:
				lookLike:
						letter:of:
						readVariable
						getParam
				stampCostume
				changeXposBy:
						getParam
				changeVar:by:
				wait:elapsed:from:
						*
						stringLength:
						getParam
				gotoX:y:
						-
						*
						stringLength:
						getParam
						\/
						getParam
				doIf
						>
						stringLength:
						getParam
				gotoX:y:
						-
						*
						\/
						getParam
				setVar:to:
				doRepeat
						stringLength:
						getParam
						doIf
						=
						readVariable
						gotoX:y:
						-
						*
						-
						stringLength:
						getParam
				\/
						getParam
				penSize:
						*
						+
						getParam
						\/
						scale
				penColor:
				putPenDown
				putPenUp
				changeXposBy:
						getParam
				changeVar:by:
				clearPenTrails
				procDef
						Flight path
						
				deleteLine:ofList:
				deleteLine:ofList:
				doRepeat
						append:toList:
						append:toList:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				procDef
						setVar:to:
						setVar:to:
						setVar:to:
						setVar:to:
						broadcast:
						setSizeTo:
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				procDef
						setVar:to:
						setSizeTo:
						setVar:to:
						setVar:to:
						call
						call
						call
						doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				call
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				call
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				procDef
						setVar:to:
						setVar:to:
						setSizeTo:
						call
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				procDef
						setVar:to:
						setSizeTo:
						call
						call
						setVar:to:
						broadcast:
						wait:elapsed:from:
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				procDef
						setVar:to:
						setVar:to:
						setVar:to:
						setSizeTo:
						call
						doIf
						=
						readVariable
						call
						call
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				broadcast:
				wait:elapsed:from:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				procDef
						setVar:to:
						call
						call
						call
						call
						call
						setVar:to:
						broadcast:
				procDef
						setSizeTo:
						setVar:to:
						call
						doBroadcastAndWait
				procDef
						setVar:to:
						setSizeTo:
						setVar:to:
						call
						broadcast:
						call
						call
						call
						call
						call
						doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				call
				doWaitUntil
						not
						list:contains:
				setVar:to:
				setVar:to:
				whenIReceive
				hide
				clearPenTrails
				penColor:
				penSize:
				doBroadcastAndWait
				doBroadcastAndWait
				setVar:to:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				whenIReceive
				setVar:to:
				setVar:to:
				wait:elapsed:from:
				setVar:to:
				createCloneOf
				wait:elapsed:from:
				setVar:to:
				createCloneOf
				procDef
						setSizeTo:
						setVar:to:
						call
						doBroadcastAndWait
				procDef
						setSizeTo:
						setVar:to:
						call
						doBroadcastAndWait
				call
				broadcast:
				broadcast:
				call
				wait:elapsed:from:
				procDef
						broadcast:
						setVar:to:
						broadcast:
						wait:elapsed:from:
				call
				call
				whenGreenFlag
				setVar:to:
				setVar:to:
				call
				call
				call
				call
				call
				whenIReceive
				wait:elapsed:from:
				setVar:to:
				setVar:to:
				setVar:to:
				doIfElse
						=
						readVariable
						call
						call
						call
						call
						call
						wait:elapsed:from:
						call
						wait:elapsed:from:
						call
						wait:elapsed:from:
						call
						call
						call
						call
						call
						call
						call
						call
						call
				call
		<<Object Enemy projectiles>>
				whenCloned
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				doIfElse
						=
						readVariable
						lookLike:
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				heading:
						readVariable
				forward:
				show
				comeToFront
				goBackByLayers:
				doUntil
						|
						<
						ypos
						|
						>
						ypos
						|
						<
						xpos
						>
						xpos
				forward:
				deleteClone
				lookLike:
				gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				heading:
						readVariable
				turnRight:
				show
				comeToFront
				goBackByLayers:
				setVar:to:
				doUntil
						|
						<
						ypos
						|
						>
						ypos
						|
						<
						xpos
						>
						xpos
				lookLike:
				doIfElse
						=
						readVariable
						forward:
						changeVar:by:
						forward:
						lookLike:
						concatenate:with:
						readVariable
				doIf
						=
						readVariable
						setVar:to:
				deleteClone
				whenGreenFlag
				hide
				whenCloned
				doForever
						doWaitUntil
						touching:
						broadcast:
						deleteClone
				whenIReceive
				setVar:to:
				nextCostume
				hideVariable:
		<<Object Info panel>>
				whenIReceive
				call
				call
				whenIReceive
				doWaitUntil
						=
						readVariable
				doWaitUntil
						=
						readVariable
				setVar:to:
				setVar:to:
				setSizeTo:
				doIfElse
						=
						stringLength:
						readVariable
				gotoX:y:
				doIfElse
						=
						stringLength:
						readVariable
				gotoX:y:
				doIfElse
						=
						stringLength:
						readVariable
				gotoX:y:
				doIfElse
						=
						stringLength:
						readVariable
				gotoX:y:
				doIfElse
						=
						stringLength:
						readVariable
				gotoX:y:
				gotoX:y:
				call
						readVariable
				setVar:to:
				whenIReceive
				setVar:to:
				setVar:to:
				setVar:to:
				hide
				clearPenTrails
				procDef
						TEXT
						
				setVar:to:
				setSizeTo:
						getParam
				penColor:
				penSize:
						*
						\/
						getParam
				doRepeat
						stringLength:
						getParam
						putPenDown
						changeXposBy:
						getParam
						putPenUp
				changeXposBy:
						-
						-
						*
						stringLength:
						getParam
						getParam
				\/
						getParam
				doRepeat
						stringLength:
						getParam
						doIfElse
						=
						letter:of:
						readVariable
						getParam
				changeXposBy:
						getParam
				changeVar:by:
				lookLike:
						letter:of:
						readVariable
						getParam
				stampCostume
				changeXposBy:
						getParam
				changeVar:by:
				whenGreenFlag
				whenIReceive
				wait:elapsed:from:
				gotoX:y:
				call
				gotoX:y:
				call
						concatenate:with:
						readVariable
				gotoX:y:
				call
						concatenate:with:
						readVariable
				gotoX:y:
				call
				setVar:to:
				clearPenTrails
				procDef
						doWaitUntil
						=
						readVariable
				doWaitUntil
						=
						readVariable
				setVar:to:
				gotoX:y:
				penColor:
				penSize:
				doRepeat
						putPenDown
						putPenUp
						changeXposBy:
				gotoX:y:
				doRepeat
						readVariable
						lookLike:
						stampCostume
						changeXposBy:
				xpos:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				putPenDown
				putPenUp
				stampCostume
				changeXposBy:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				putPenDown
				putPenUp
				stampCostume
				setVar:to:
				procDef
						doWaitUntil
						=
						readVariable
				doWaitUntil
						=
						readVariable
				setVar:to:
				gotoX:y:
				penColor:
				penSize:
				doRepeat
						putPenDown
						putPenUp
						changeXposBy:
				gotoX:y:
				doRepeat
						readVariable
						lookLike:
						stampCostume
						changeXposBy:
				setVar:to:
				whenIReceive
				call
				whenIReceive
				setVar:to:
				gotoX:y:
				call
						concatenate:with:
						readVariable
				setVar:to:
				whenIReceive
				setVar:to:
				gotoX:y:
				call
						concatenate:with:
						readVariable
				setVar:to:
				whenGreenFlag
				setVar:to:
		<<Object Sprite1>>
				whenGreenFlag
				hide
				setVar:to:
				setVar:to:
				doForever
						doIf
						<
						readVariable
						setVar:to:
				doIf
						<
						readVariable
						setVar:to:
				changeVar:by:
				changeVar:by:
		<<Object Power Ups>>
				whenCloned
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				setVar:to:
						readVariable
				comeToFront
				setSizeTo:
				show
				gotoX:y:
						readVariable
						readVariable
				doIf
						=
						readVariable
						doIfElse
						=
						readVariable
						setVar:to:
						lookLike:
				doIf
						=
						readVariable
						doIfElse
						=
						readVariable
						setVar:to:
						lookLike:
				doIf
						|
						=
						readVariable
						=
						readVariable
				setVar:to:
				setVar:to:
				setVar:to:
						readVariable
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				doIf
						=
						readVariable
						lookLike:
				doUntil
						touching:
						doIf
						=
						readVariable
						doIf
						=
						readVariable
						setVar:to:
						broadcast:
				doIf
						=
						readVariable
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				doIf
						=
						readVariable
						+
						readVariable
				setVar:to:
						readVariable
				doIf
						=
						readVariable
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				doIf
						=
						readVariable
						+
						readVariable
				setVar:to:
						readVariable
				changeYposBy:
				deleteClone
				whenCloned
				doForever
						doIf
						touching:
						doIf
						=
						readVariable
						playSound:
						broadcast:
				doIf
						=
						readVariable
						playSound:
						setVar:to:
				doIf
						=
						readVariable
						playSound:
						changeVar:by:
						broadcast:
				doIf
						=
						readVariable
						playSound:
						changeVar:by:
						broadcast:
				doIf
						=
						readVariable
						playSound:
						changeVar:by:
						doIf
						>
						readVariable
						setVar:to:
				broadcast:
				doIf
						=
						readVariable
						playSound:
						changeVar:by:
						doIf
						>
						readVariable
						setVar:to:
				broadcast:
				doIf
						=
						readVariable
						playSound:
						doIfElse
						=
						readVariable
						setVar:to:
						broadcast:
						broadcast:
						doIf
						=
						readVariable
						setVar:to:
						broadcast:
						broadcast:
				doIf
						=
						readVariable
						playSound:
						broadcast:
				doIf
						=
						readVariable
						playSound:
						doIfElse
						=
						readVariable
						setVar:to:
						broadcast:
						doIf
						=
						readVariable
						setVar:to:
						broadcast:
				hide
				deleteClone
				whenIReceive
				hide
				setGraphicEffect:to:
				setGraphicEffect:to:
				whenGreenFlag
				setVar:to:
				gotoX:y:
				call
				hide
				whenIReceive
				doIf
						=
						readVariable
						doRepeat
						wait:elapsed:from:
						setGraphicEffect:to:
						wait:elapsed:from:
						setGraphicEffect:to:
				filterReset
				procDef
						show
						changeGraphicEffect:by:
						doRepeat
						nextCostume
				filterReset
		<<Object Secondary pattern spawn>>
				procDef
						number of clones
						setVar:to:
						setVar:to:
						doIfElse
						=
						letter:of:
						getParam
				call
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				call
						getParam
				call
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				setVar:to:
				doRepeat
						getParam
						changeVar:by:
						doIfElse
						list:contains:
						setVar:to:
						setVar:to:
						doRepeat
						lineCountOfList:
						doIf
						=
						getLine:ofList:
						readVariable
				doIf
						=
						readVariable
						setLine:ofList:to:
						readVariable
						setLine:ofList:to:
						readVariable
						getParam
						setLine:ofList:to:
						readVariable
						doIf
						=
						readVariable
						getParam
						setLine:ofList:to:
						readVariable
						getParam
				setVar:to:
						readVariable
				changeVar:by:
				setVar:to:
				setVar:to:
						getParam
				createCloneOf
				changeVar:by:
				append:toList:
				append:toList:
				append:toList:
				append:toList:
						getParam
				append:toList:
				setVar:to:
						+
						lineCountOfList:
				doIfElse
						=
						readVariable
						getParam
						append:toList:
						getParam
				append:toList:
				changeVar:by:
				setVar:to:
						getParam
				createCloneOf
				wait:elapsed:from:
						getParam
				procDef
						string1
						
				doIf
						=
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						-
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						+
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						-
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				doIf
						=
						letter:of:
						getParam
				setVar:to:
				doRepeat
						changeVar:by:
						setLine:ofList:to:
						readVariable
						+
						getLine:ofList:
						readVariable
						concatenate:with:
						letter:of:
						getParam
						letter:of:
						getParam
				procDef
						FlightPath
						
				deleteLine:ofList:
				deleteLine:ofList:
				doRepeat
						append:toList:
						append:toList:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				doIf
						=
						getParam
						setVar:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
						setLine:ofList:to:
				procDef
						pattern
						
				setVar:to:
				call
						getParam
				doWaitUntil
						=
						readVariable
				broadcast:
				call
				call
				whenIReceive
				doIf
						=
						readVariable
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				doIf
						=
						readVariable
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				doIf
						=
						readVariable
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				doIf
						=
						readVariable
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				doIf
						=
						readVariable
						setVar:to:
						call
						doWaitUntil
						not
						list:contains:
				whenGreenFlag
				hide
		<<Object Cloud Score>>
				procDef
						list
						
				setVar:to:
						setVar:to:
						setVar:to:
						doRepeat
						lineCountOfList:
						getParam
						setVar:to:
						doRepeat
						stringLength:
						getLine:ofList:
						readVariable
						getParam
				setVar:to:
				doUntil
						|
						=
						letter:of:
						readVariable
						readVariable
						letter:of:
						readVariable
						getLine:ofList:
						readVariable
						getParam
				>
						readVariable
						stringLength:
								readVariable
				changeVar:by:
				doIf
						not
						>
						readVariable
						stringLength:
						readVariable
				lookLike:
				lookLike:
						letter:of:
						readVariable
						getLine:ofList:
						readVariable
						getParam
				doIf
						&
						=
						costumeIndex
						<
						readVariable
				changeVar:by:
				doUntil
						not
						<
						stringLength:
						readVariable
						stringLength:
						stringLength:
						readVariable
				setVar:to:
						concatenate:with:
						readVariable
				setVar:to:
						concatenate:with:
						readVariable
						readVariable
				changeVar:by:
				setVar:to:
						concatenate:with:
						readVariable
				changeVar:by:
				setVar:to:
						getParam
						readVariable
				procDef
						number
						
				setVar:to:
						setVar:to:
						setVar:to:
						deleteLine:ofList:
						getParam
						doRepeat
						\/
						stringLength:
						getParam
				setVar:to:
						concatenate:with:
						letter:of:
						+
						readVariable
						getParam
				letter:of:
						+
						readVariable
						getParam
				doIfElse
						&
						=
						readVariable
						not
						=
						getParam
				append:toList:
						readVariable
						getParam
				setVar:to:
				setVar:to:
						concatenate:with:
						readVariable
						letter:of:
						readVariable
						readVariable
				changeVar:by:
				procDef
						string
						
				deleteLine:ofList:
				setVar:to:
				doRepeat
						stringLength:
						getParam
						changeVar:by:
						setVar:to:
						doIfElse
						=
						letter:of:
						readVariable
						getParam
				doUntil
						|
						=
						letter:of:
						readVariable
						getParam
						letter:of:
						readVariable
						readVariable
				>
						readVariable
				changeVar:by:
				insert:at:ofList:
						concatenate:with:
						getLine:ofList:
						letter:of:
						readVariable
						readVariable
				deleteLine:ofList:
				setVar:to:
						getLine:ofList:
				whenIReceive
				call
				whenGreenFlag
				hide
				setVar:to:
				setVar:to:
				whenIReceive
				doWaitUntil
						=
						readVariable
				call
						readVariable
				call
						readVariable
				broadcast:
				setLine:ofList:to:
				call
				procDef
						call
						readVariable
						call
						readVariable
						setVar:to:
						setVar:to:
						doRepeat
						lineCountOfList:
						changeVar:by:
						doIf
						>
						readVariable
						getLine:ofList:
						readVariable
				insert:at:ofList:
						readVariable
						readVariable
				doIf
						>
						lineCountOfList:
						deleteLine:ofList:
				call
				setVar:to:
						getUserName
				doIfElse
						=
						readVariable
						setVar:to:
						setVar:to:
						getUserName
				call
						readVariable
				insert:at:ofList:
						getLine:ofList:
						readVariable
				call
				setVar:to:
				broadcast:
				stopScripts
				setVar:to:
				insert:at:ofList:
						readVariable
				call
		<<Object WRITE HS>>
				whenIReceive
				setVar:to:
				setVar:to:
				gotoX:y:
				doRepeat
						changeVar:by:
						doIf
						<
						lineCountOfList:
						readVariable
						setVar:to:
						stopScripts
				call
						getLine:ofList:
						readVariable
				xpos:
				call
						getLine:ofList:
						readVariable
				xpos:
				changeYposBy:
				setVar:to:
				whenGreenFlag
				hide
				procDef
						sentence
						
				setVar:to:
				doRepeat
						stringLength:
						getParam
						changeVar:by:
						lookLike:
						letter:of:
						readVariable
						getParam
				stampCostume
				changeXposBy:
				whenIReceive
				stopScripts
				clearPenTrails
		<<Object Battle Ship>>
		<<Object Clone Writer>>
				procDef
						text
						
				setVar:to:
				setVar:to:
						getParam
				doUntil
						>
						readVariable
						stringLength:
						getParam
				lookLike:
						letter:of:
						readVariable
						getParam
				doIf
						=
						letter:of:
						readVariable
						getParam
				doIf
						=
						letter:of:
						+
						readVariable
						getParam
				lookLike:
				doIf
						=
						letter:of:
						+
						readVariable
						getParam
				lookLike:
				doIf
						=
						letter:of:
						+
						readVariable
						getParam
				lookLike:
				doIf
						=
						letter:of:
						+
						readVariable
						getParam
				lookLike:
				doIf
						&
						=
						letter:of:
						readVariable
						getParam
				=
						letter:of:
								+
								readVariable
								getParam
				lookLike:
				doIfElse
						=
						letter:of:
						readVariable
						getParam
				changeXposBy:
						*
						\/
						scale
				setVar:to:
				doIf
						&
						|
						>
						letter:of:
						readVariable
						getParam
				=
						letter:of:
								readVariable
								getParam
				|
						<
								letter:of:
										readVariable
										getParam
						=
								letter:of:
										readVariable
										getParam
				setVar:to:
				doIf
						&
						|
						>
						letter:of:
						readVariable
						getParam
				=
						letter:of:
								readVariable
								getParam
				|
						<
								letter:of:
										readVariable
										getParam
						=
								letter:of:
										readVariable
										getParam
				setVar:to:
				doIf
						|
						=
						letter:of:
						readVariable
						getParam
				|
						=
								letter:of:
										readVariable
										getParam
						|
								=
										letter:of:
												readVariable
												getParam
								=
										letter:of:
												readVariable
												getParam
				setVar:to:
				doIf
						|
						=
						letter:of:
						readVariable
						getParam
				|
						=
								letter:of:
										readVariable
										getParam
						|
								=
										letter:of:
												readVariable
												getParam
								=
										letter:of:
												readVariable
												getParam
				setVar:to:
				doIf
						|
						=
						letter:of:
						readVariable
						getParam
				|
						=
								letter:of:
										readVariable
										getParam
						=
								letter:of:
										readVariable
										getParam
				setVar:to:
				doIf
						=
						readVariable
						createCloneOf
						doIfElse
						&
						>
						costumeIndex
						<
						costumeIndex
				changeXposBy:
						*
						\/
						scale
				changeVar:by:
				changeXposBy:
						*
						getLine:ofList:
						costumeIndex
						\/
						scale
				doIf
						>
						xpos
						xpos:
						changeYposBy:
				changeVar:by:
				hide
				whenIReceive
				deleteClone
				whenGreenFlag
				filterReset
				hide
				whenCloned
				whenIReceive
				deleteClone
				forward:
				forward:
				whenIReceive
				broadcast:
				gotoX:y:
				call
				whenCloned
				setSizeTo:
				show
				comeToFront
				setGraphicEffect:to:
				setGraphicEffect:to:
				doRepeat
						changeGraphicEffect:by:
						setGraphicEffect:to:
						wait:elapsed:from:
						setGraphicEffect:to:
						wait:elapsed:from:
				deleteClone
				doIfElse
						&
						>
						costumeIndex
						<
						costumeIndex
				setGraphicEffect:to:
				setGraphicEffect:to:
				doIfElse
						=
						%
						readVariable
				setGraphicEffect:to:
				setGraphicEffect:to:
				setGraphicEffect:to:
				setGraphicEffect:to:
						readVariable
		<<Object astroids>>
				whenGreenFlag
				setVar:to:
				setVar:to:
				hide
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				ypos:
				whenCloned
				doIfElse
						=
						readVariable
						gotoX:y:
						randomFrom:to:
						heading:
						setVar:to:
						randomFrom:to:
						readVariable
						readVariable
				setVar:to:
				gotoX:y:
						readVariable
						readVariable
				heading:
						readVariable
				setVar:to:
						readVariable
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
						randomFrom:to:
						readVariable
						readVariable
				setSizeTo:
						readVariable
				show
				doUntil
						&
						touching:
						=
						readVariable
				forward:
						readVariable
				doRepeat
						forward:
						readVariable
				setLine:ofList:to:
						readVariable
				setLine:ofList:to:
						readVariable
				deleteClone
				procDef
						Reward
						
				setVar:to:
						xpos
				setVar:to:
						ypos
				setVar:to:
						getParam
				createCloneOf
				whenIReceive
				setVar:to:
				setVar:to:
				hide
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				ypos:
				deleteClone
				whenCloned
				doForever
						doIf
						=
						readVariable
						doIf
						<
						ypos
						doIfElse
						<
						xpos
						turnRight:
						doIf
						>
						xpos
						turnRight:
				stopScripts
				whenCloned
				wait:elapsed:from:
				doWaitUntil
						not
						touching:
				forward:
						readVariable
				wait:elapsed:from:
				setVar:to:
				procDef
						setVar:to:
						randomFrom:to:
						doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				whenCloned
				comeToFront
				goBackByLayers:
				doForever
						doIf
						|
						|
						|
						touching:
						touching:
						|
						touching:
						touching:
				touching:
				playSound:
				setVar:to:
				changeVar:by:
				broadcast:
				doIfElse
						<
						scale
						setVar:to:
						readVariable
						broadcast:
						deleteClone
				doRepeat
						setGraphicEffect:to:
						wait:elapsed:from:
						setGraphicEffect:to:
				setVar:to:
						xpos
				setVar:to:
						ypos
				setVar:to:
						readVariable
				broadcast:
				doIf
						not
						=
						readVariable
				call
						readVariable
				setVar:to:
				setVar:to:
						randomFrom:to:
				setVar:to:
						\/
						scale
				setLine:ofList:to:
						readVariable
						scale
				heading:
						+
						readVariable
				setSizeTo:
						\/
						scale
				filterReset
				changeVar:by:
				append:toList:
				append:toList:
				append:toList:
				createCloneOf
				doWaitUntil
						not
						touching:
				whenCloned
				setVar:to:
						randomFrom:to:
						readVariable
						readVariable
				setVar:to:
				doForever
						changeVar:by:
						doIf
						=
						readVariable
						setVar:to:
				wait:elapsed:from:
						readVariable
				lookLike:
						concatenate:with:
						readVariable
				ypos
				xpos
				whenCloned
				setVar:to:
						readVariable
				doForever
						call
				procDef
						setLine:ofList:to:
						readVariable
						ypos
						setLine:ofList:to:
						readVariable
						xpos
						setLine:ofList:to:
						readVariable
						scale
				whenIReceive
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				doRepeat
						wait:elapsed:from:
						readVariable
						doIfElse
						=
						randomFrom:to:
						call
						setVar:to:
				changeVar:by:
				append:toList:
				append:toList:
				append:toList:
				createCloneOf
				setVar:to:
				filterReset
				wait:elapsed:from:
				broadcast:
				whenCloned
				wait:elapsed:from:
				doIf
						=
						readVariable
						doIf
						=
						randomFrom:to:
						doIf
						&
						>
						scale
						<
						readVariable
				setVar:to:
						readVariable
				broadcast:
				doIf
						=
						readVariable
						doIf
						=
						randomFrom:to:
						doIf
						&
						>
						scale
						<
						readVariable
				setVar:to:
						readVariable
				broadcast:
				whenIReceive
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				doRepeat
						wait:elapsed:from:
						readVariable
						doIfElse
						=
						randomFrom:to:
						call
						setVar:to:
				changeVar:by:
				append:toList:
				append:toList:
				append:toList:
				createCloneOf
				setVar:to:
				filterReset
				wait:elapsed:from:
				broadcast:
				whenIReceive
				deleteLine:ofList:
				deleteLine:ofList:
				deleteLine:ofList:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				doRepeat
						wait:elapsed:from:
						readVariable
						doIfElse
						=
						randomFrom:to:
						call
						setVar:to:
				changeVar:by:
				append:toList:
				append:toList:
				append:toList:
				createCloneOf
				setVar:to:
				filterReset
				wait:elapsed:from:
				broadcast:
				whenIReceive
				deleteClone
				whenCloned
				doIf
						not
						=
						readVariable
				setGraphicEffect:to:
				setGraphicEffect:to:
		<<Object canon for asteroid>>
				whenGreenFlag
				hide
				whenCloned
				show
				comeToFront
				setVar:to:
						readVariable
				doForever
						gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				pointTowards:
				doIf
						|
						<
						getLine:ofList:
						readVariable
				=
						getLine:ofList:
								readVariable
				deleteClone
				whenIReceive
				createCloneOf
				say:
				setVar:to:
				pointTowards:
				+
				whenCloned
				wait:elapsed:from:
				doForever
						playSound:
						setVar:to:
						heading
						setVar:to:
						readVariable
						setVar:to:
						createCloneOf
						wait:elapsed:from:
				whenIReceive
				deleteClone
		<<Object Player>>
				whenIReceive
				show
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				setVar:to:
				show
				lookLike:
				setSizeTo:
				gotoX:y:
				setRotationStyle
				procDef
						setVar:to:
						doIfElse
						=
						readVariable
						setVar:to:
						playSound:
						doIfElse
						=
						readVariable
						setVar:to:
						playSound:
						doIfElse
						=
						readVariable
						setVar:to:
						playSound:
						doIf
						=
						readVariable
						setVar:to:
						playSound:
				broadcast:
				procDef
						doIfElse
						=
						readVariable
						setVar:to:
						setVar:to:
						createCloneOf
						doIf
						=
						readVariable
						setVar:to:
						setVar:to:
						createCloneOf
				whenKeyPressed
				doIf
						=
						readVariable
						doIf
						>
						readVariable
						doIf
						=
						readVariable
						doIf
						list:contains:
						setVar:to:
						setVar:to:
						changeVar:by:
						createCloneOf
						broadcast:
						wait:elapsed:from:
						setVar:to:
				procDef
						changeVar:by:
						broadcast:
						doIfElse
						=
						readVariable
						setVar:to:
						broadcast:
						lookLike:
						setSizeTo:
						setVar:to:
						playSound:
						doRepeat
						wait:elapsed:from:
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				hide
				call
				doRepeat
						setGraphicEffect:to:
						wait:elapsed:from:
						filterReset
				setVar:to:
				whenGreenFlag
				hide
				comeToFront
				goBackByLayers:
				whenIReceive
				call
				whenGreenFlag
				doForever
						doWaitUntil
						=
						readVariable
				doIf
						mousePressed
						wait:elapsed:from:
						readVariable
						setVar:to:
						createCloneOf
						playSound:
						doIf
						=
						readVariable
						wait:elapsed:from:
						setVar:to:
						playSound:
						createCloneOf
						wait:elapsed:from:
						setVar:to:
						playSound:
						createCloneOf
				whenGreenFlag
				doForever
						doWaitUntil
						&
						not
						=
						readVariable
				not
						=
						readVariable
				pointTowards:
				doIfElse
						=
						readVariable
						doIf
						>
						distanceTo:
						forward:
						*
						readVariable
						readVariable
				doIfElse
						<
						distanceTo:
						doIfElse
						=
						readVariable
						lookLike:
						doIfElse
						=
						readVariable
						lookLike:
						lookLike:
				setVar:to:
						xpos
				forward:
				doIfElse
						>
						xpos
						readVariable
						doIfElse
						=
						readVariable
						lookLike:
						doIfElse
						=
						readVariable
						lookLike:
						lookLike:
				forward:
						*
						readVariable
						readVariable
				doIfElse
						=
						readVariable
						lookLike:
						doIfElse
						=
						readVariable
						lookLike:
						lookLike:
				forward:
						*
						readVariable
						readVariable
				whenGreenFlag
				call
				doIfElse
						doIf
				procDef
						show
						changeGraphicEffect:by:
						doRepeat
						nextCostume
				filterReset
				hide
				whenGreenFlag
				doForever
						doWaitUntil
						|
						touching:
						|
						touching:
						touching:
				doIf
						=
						readVariable
						doIf
						=
						readVariable
						setVar:to:
						call
		<<Object Clone Explosions>>
				whenGreenFlag
				setVar:to:
				hide
				whenIReceive
				createCloneOf
				whenCloned
				show
				setVar:to:
						readVariable
				gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				setSizeTo:
						*
						getLine:ofList:
						readVariable
				setVar:to:
				doRepeat
						changeVar:by:
						lookLike:
						concatenate:with:
						readVariable
				wait:elapsed:from:
				deleteClone
				whenIReceive
				setVar:to:
		<<Object ForceField>>
				whenGreenFlag
				hide
				setVar:to:
				setVar:to:
				whenIReceive
				doIf
						=
						readVariable
						setVar:to:
						doRepeat
						setGraphicEffect:to:
						wait:elapsed:from:
						filterReset
				doIf
						=
						costumeIndex
						hide
						setVar:to:
						stopScripts
				doIf
						=
						costumeIndex
						lookLike:
						setVar:to:
				setVar:to:
				whenIReceive
				setVar:to:
				setVar:to:
				whenIReceive
				hide
				setVar:to:
				stopScripts
				whenIReceive
				setVar:to:
				comeToFront
				show
				doIfElse
						=
						readVariable
						setVar:to:
						lookLike:
						doIf
						=
						readVariable
						setVar:to:
						lookLike:
				setVar:to:
				doForever
						wait:elapsed:from:
						doIf
						<
						readVariable
						setVar:to:
				doIf
						>
						readVariable
						setVar:to:
				changeVar:by:
						readVariable
				setGraphicEffect:to:
						readVariable
				whenIReceive
				doForever
						gotoX:y:
						getAttribute:of:
						+
						getAttribute:of:
				doIf
						touching:
						doBroadcastAndWait
				broadcast:
		<<Object round add on>>
				whenCloned
				setVar:to:
						readVariable
				heading:
				show
				doForever
						gotoX:y:
						+
						getAttribute:of:
						readVariable
						getAttribute:of:
				whenCloned
				append:toList:
				doForever
						doIfElse
						=
						readVariable
						doWaitUntil
						keyPressed:
						turnLeft:
						setLine:ofList:to:
						heading
				doWaitUntil
						keyPressed:
				turnRight:
				setLine:ofList:to:
						heading
				whenCloned
				doForever
						doIf
						mousePressed
						doIf
						=
						readVariable
						doIf
						=
						readVariable
						setVar:to:
						createCloneOf
						wait:elapsed:from:
				doIf
						=
						readVariable
						setVar:to:
						createCloneOf
						wait:elapsed:from:
				procDef
						doIf
						=
						readVariable
						setVar:to:
				doIf
						=
						readVariable
						setVar:to:
				setVar:to:
				doRepeat
						wait:elapsed:from:
						setSizeTo:
						lookLike:
						concatenate:with:
						readVariable
				changeVar:by:
				deleteClone
				whenCloned
				doForever
						doWaitUntil
						touching:
						doIf
						=
						readVariable
						call
				whenCloned
				doForever
						doWaitUntil
						touching:
						call
				whenIReceive
				setVar:to:
				setVar:to:
				hide
				lookLike:
				setSizeTo:
				comeToFront
				setRotationStyle
				deleteLine:ofList:
				doIf
				whenIReceive
				deleteClone
				whenCloned
				doForever
						doWaitUntil
						touching:
						doIf
						=
						readVariable
						call
		<<Object Sprite2>>
				doIf
						=
						readVariable
				setVar:to:
				setVar:to:
				setVar:to:
				show
				whenGreenFlag
				setVar:to:
				clearPenTrails
				show
				gotoX:y:
				setSizeTo:
				setGraphicEffect:to:
				broadcast:
				wait:elapsed:from:
				broadcast:
				doForever
						doIf
						=
						readVariable
						doIf
						touching:
						doIf
						mousePressed
						hide
						putPenUp
						setVar:to:
						clearPenTrails
						broadcast:
				whenIReceive
				doWaitUntil
						=
						readVariable
				show
				broadcast:
				broadcast:
				clearPenTrails
		<<Object special effects>>
				whenIReceive
				show
				comeToFront
				setSizeTo:
				setVar:to:
				doRepeat
						changeVar:by:
						lookLike:
						concatenate:with:
						readVariable
				gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				setVar:to:
				hide
				lookLike:
				whenIReceive
				hide
				lookLike:
				whenIReceive
				show
				comeToFront
				lookLike:
				setSizeTo:
				doUntil
						|
						=
						readVariable
						=
						readVariable
				doIf
						=
						getLine:ofList:
						readVariable
				hide
				lookLike:
				gotoX:y:
						getLine:ofList:
						readVariable
						getLine:ofList:
						readVariable
				hide
				lookLike:
				whenIReceive
				hide
				whenGreenFlag
				call
				procDef
						show
						changeGraphicEffect:by:
						doRepeat
						nextCostume
				filterReset
				hide
				whenIReceive
				lookLike:
				hide
				whenGreenFlag
				hide